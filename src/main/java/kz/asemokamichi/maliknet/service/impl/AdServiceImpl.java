package kz.asemokamichi.maliknet.service.impl;

import jakarta.transaction.Transactional;
import kz.asemokamichi.maliknet.advice.exceptions.InvalidRequest;
import kz.asemokamichi.maliknet.advice.exceptions.ResourceNotFound;
import kz.asemokamichi.maliknet.data.entity.Ad;
import kz.asemokamichi.maliknet.data.entity.Bid;
import kz.asemokamichi.maliknet.data.entity.User;
import kz.asemokamichi.maliknet.repository.AdRepository;
import kz.asemokamichi.maliknet.service.*;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

@Slf4j
@Service
@RequiredArgsConstructor
public class AdServiceImpl implements AdService {
    private final AdRepository adRepository;
    private final UserService userService;
    private final AdImageService adImageService;
    private final NotificationService notificationService;

    private final BidService bidService;

    private final ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();

    @Override
    public List<Ad> getAllAds(Map<String, String> filters) {
        return adRepository.findAll();
    }

    @Override
    public Ad getAdById(Long id) {
        return adRepository.findById(id)
                .orElseThrow(() -> new IllegalArgumentException("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"));
    }

    @Override
    public Ad saveAd(Ad ad) throws IOException {
        User user = userService.getCurrentUser();
        ad.setUser(user);
        ad.setCreatedAt(LocalDateTime.now());
        ad.setStatus(true);

        adRepository.save(ad);

        if (ad.getPhotos() != null && !ad.getPhotos().isEmpty()) {
            adImageService.saveAdImage(ad.getPhotos(), ad);
        }

        return ad;
    }

    @Override
    public Ad changeAdStatus(Long id, boolean active) {
        Ad ad = getAdById(id);
        ad.setStatus(active);
        ad.setClosedAt(active ? null : LocalDateTime.now());

        return adRepository.save(ad);
    }

    @Override
    public void deleteAd(Long id) {
        Ad ad = getAdById(id);
        adRepository.delete(ad);
    }

    @Override
    @Transactional
    public Ad placeBid(Long adId, Bid newBid) {
        Ad ad = adRepository.findById(adId)
                .orElseThrow(() -> new ResourceNotFound("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"));

        if (!Boolean.TRUE.equals(ad.getStatus())) {
            throw new InvalidRequest("–ê—É–∫—Ü–∏–æ–Ω –∑–∞–∫—Ä—ã—Ç –¥–ª—è —Å—Ç–∞–≤–æ–∫");
        }

        BigDecimal currentPrice = ad.getCurrentPrice() != null ? ad.getCurrentPrice() : ad.getMinPrice();
        if (newBid.getAmount().compareTo(currentPrice) <= 0) {
            throw new InvalidRequest("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã");
        }

        User currentUser = userService.getCurrentUser();

        Bid previousLastBid = ad.getBids().stream()
                .max(Comparator.comparing(Bid::getCreatedAt))
                .orElse(null);

        if (previousLastBid != null && previousLastBid.getUser().getId().equals(currentUser.getId())) {
            throw new InvalidRequest("–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ—Å–ª–µ–¥–Ω–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π");
        }

        if (previousLastBid != null) {
            notificationService.notifyUser(
                    previousLastBid.getUser(),
                    "‚ùó–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é \"" + ad.getTitle() + "\" –±—ã–ª–∞ –ø–µ—Ä–µ–±–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º " + currentUser.getFirstName()
            );
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É
        newBid.setAd(ad);
        newBid.setUser(currentUser);
        newBid.setCreatedAt(LocalDateTime.now());

        newBid = bidService.createBid(newBid);

        ad.setCurrentPrice(newBid.getAmount());
        ad.getBids().add(newBid);

        adRepository.save(ad);

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        scheduleClosing(ad, newBid);

        return ad;
    }

    private void scheduleClosing(Ad ad, Bid bid) {
        int minutes = ad.getBiddingDurationMinutes();

        scheduler.schedule(() -> {
            try {
                Ad freshAd = adRepository.findByIdWithBidsAndUsers(ad.getId())
                        .orElseThrow(() -> new ResourceNotFound("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"));

                if (!Boolean.TRUE.equals(freshAd.getStatus())) {
                    throw new InvalidRequest("–û–±—ä—è–≤–ª–µ–Ω–∏–µ ID " + ad.getId() + " —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ –≤—Ä—É—á–Ω—É—é");
                }

                Bid latestBid = freshAd.getBids().stream()
                        .max(Comparator.comparing(Bid::getCreatedAt))
                        .orElse(null);

                if (latestBid == null || !latestBid.getId().equals(bid.getId())) {
                    throw new InvalidRequest(
                            String.format("–°—Ç–∞–≤–∫–∞ ID %d –ø–µ—Ä–µ–±–∏—Ç–∞. –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞ ‚Äî ID %s",
                                    bid.getId(), latestBid != null ? latestBid.getId().toString() : "null")
                    );
                }

                freshAd.setStatus(false);
                freshAd.setClosedAt(LocalDateTime.now());

                User buyer = latestBid.getUser();
                User seller = freshAd.getUser();

                notificationService.notifyUser(buyer, "‚úÖ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –∞—É–∫—Ü–∏–æ–Ω –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é: " + freshAd.getTitle());
                if (!Objects.equals(buyer.getId(), seller.getId())) notificationService.notifyUser(seller, "üì¶ –û–±—ä—è–≤–ª–µ–Ω–∏–µ \"" + freshAd.getTitle() + "\" –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: " + buyer.getFirstName());

                adRepository.save(freshAd);
                log.info("–ê—É–∫—Ü–∏–æ–Ω ID {} –∑–∞–≤–µ—Ä—à—ë–Ω", ad.getId());
            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞ ID " + ad.getId(), e);
            }
        }, minutes, TimeUnit.MINUTES);
    }

    @Override
    public Ad getBidHistory(Long adId) {
        Ad ad = getAdById(adId);
        ad.getBids().sort((b1, b2) -> b2.getCreatedAt().compareTo(b1.getCreatedAt()));

        return ad;
    }

    @Override
    public BigDecimal getCurrentPrice(Long adId) {
        Ad ad = getAdById(adId);
        return ad.getCurrentPrice();
    }

}